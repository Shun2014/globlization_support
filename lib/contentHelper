
var fs=require('fs');
var path=require('path');

exports.contentHelper = contentHelper;

exports.contentHelper1 = contentHelper1;

exports.parseProFile = parseProFile;

exports.gl_languages = gl_languages;


var gl_languages = [ 'ar',
    'bg',
    'ca',
    'cs',
    'da',
    'de',
    'el',
    'en',
    'es',
    'eu',
    'fi',
    'fr',
    'hr',
    'hu',
    'in',
    'it',
    'iw',
    'ja',
    'kk',
    'ko',
    'nl',
    'no',
    'pl',
    'pt',
    'ro',
    'ru',
    'sk',
    'sl',
    'sr',
    'sv',
    'th',
    'tr',
    'zh',
    'zh' ]


function getStringFromKey(key, content){
    //console.log(content);
    if(content){
        return content[key];
    }
    console.log("warning - content is null.");
    return '';
}




function parseProFile (path, encoding){
    var encoding = encoding==null?'UTF-8':encoding;
    try {
        var content = fs.readFileSync(path, encoding);
        var regDC = /\s*(#+)/;  //reg for deleting comments
        var regDS = /\s*=\s*/;  //reg for deleting space near '='
        var keyvalue = {};

        var temp = null;
        var regDE = /.+/g;  //reg for enter
        while(temp=regDE.exec(content)) {
            if (!regDC.test(temp)) {
                keyvalue[temp.toString().split(regDS)[0]] = temp.toString().split(regDS)[1];
                //console.log(temp.toString());
            }
        }
    } catch (e) {
        console.log('error when parsing property file - ' + path);
        console.log(e);
        return null;
    }
    return keyvalue;
}

function readJsonFile(path){
    try{
        var content = fs.readFileSync(path);
        var jsonObj =  JSON.parse(content);
        return jsonObj;
    } catch (e){

        console.log('error when reading json file - ' + path);
        console.log(e);
        return '';
    }

}



function getFiles(filepath){

    return fs.readdirSync(filepath);

}

/**
 * proFilePath: location for the property  files
 * jsonFilePath: location for the source json files
 * resultFilePath: location for the output json files
 * proKey:  name of the key in the property file
 * jsonKey: name of the key in the json file
 * compareFunction: a function to match the property file and the json file by languages
 */

function contentHelper(proFilePath, jsonFilePath, resultFilePath, proKey, jsonKey, compareFunction){



    var inputFiles = getFiles(proFilePath);
    console.log("list property files: ");
    console.log(inputFiles);



    var sourceFiles = getFiles(jsonFilePath);

    console.log("list json files: ");
    console.log(sourceFiles);

    inputFiles.forEach(function(inputFile){

        sourceFiles.forEach(function(sourceFile){


            if(compareFunction(inputFile, sourceFile)){
                //console.log(proFilePath+ '/' +inputFile)

                var value = getStringFromKey(proKey, parseProFile(proFilePath+ '/' +inputFile));

                var result = readJsonFile(jsonFilePath + '/' + sourceFile);

                result[jsonKey] = value;

                var resultPath = resultFilePath + '/' + sourceFile;

                console.log("write new file to - " + resultPath);

                fs.writeFileSync(resultPath, JSON.stringify(result, null, 4));

            }
        })

    })

}


/**
 * languages: the languages need to handle
 * proFilePath: location for the property  files
 * jsonFilePath: location for the source json files
 * resultFilePath: location for the output json files
 * proKey:  name of the key in the property file
 * jsonKey: name of the key in the json file
 * generateProFileNameByLanguage: a function to generate the name of property file
 * generateJsonFileNameByLanguageï¼š a function to generate the name of json file
 */

function contentHelper1(languages, proFilePath, jsonFilePath, resultFilePath,
                       proKey, jsonKey, generateProFileNameByLanguage, generateJsonFileNameByLanguage){

    languages.forEach(function(language){
        console.log("working on - " + language);
        var inputFilePath =  proFilePath + generateProFileNameByLanguage(language);
        var jsonFileName =  generateJsonFileNameByLanguage(language);
        var sourceFilePath =  jsonFilePath + jsonFileName;

        var value = getStringFromKey(proKey, parseProFile(inputFilePath));
        var result = readJsonFile(sourceFilePath);
        result[jsonKey] = value;
        var resultPath = resultFilePath + '/' + jsonFileName;

        console.log("write new file to - " + resultPath);

        fs.writeFileSync(resultPath, JSON.stringify(result, null, 4));
    });



}

